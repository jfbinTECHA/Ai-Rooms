version: '3.8'

services:
  caddy:
    image: caddy:2-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - backend
      - websocket

  backend:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ai_rooms
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis

  websocket:
    build: ./websocket

  frontend:
    build: ./frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://caddy
      - NEXT_PUBLIC_WS_URL=ws://caddy

  model_workers:
    build: ./model_workers
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}

  embeddings_worker:
    build: ./embeddings_worker

  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ai_rooms
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infra/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql

  redis:
    image: redis:7-alpine
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ./infra/redis.conf:/etc/redis/redis.conf
      - redis_data:/data

  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio-setup:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set local http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb local/ai-rooms-uploads;
      /usr/bin/mc mb local/ai-rooms-models;
      /usr/bin/mc mb local/ai-rooms-logs;
      /usr/bin/mc policy set public local/ai-rooms-uploads;
      echo 'MinIO setup completed';
      "

  prometheus:
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one

  loki:
    image: grafana/loki
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml

volumes:
  postgres_data:
  redis_data:
  minio_data:
  grafana_data:
  caddy_data:
  caddy_config: